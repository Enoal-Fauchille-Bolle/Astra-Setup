- name: Create Filebrowser directory
  file:
    path: "{{ filebrowser_directory }}"
    state: directory
    mode: "0755"
  become: true

- name: Allow Filebrowser port through UFW
  ufw:
    rule: allow
    port: "{{ filebrowser_port }}"
    proto: tcp
    comment: "Filebrowser"
  become: true

- name: Import docker-compose.yml
  template:
    src: "{{ role_path }}/files/docker-compose.yml.j2"
    dest: "{{ filebrowser_directory }}/docker-compose.yml"
    mode: "0644"
  notify: Restart Filebrowser
  become: true

- name: Check if database is initialized
  stat:
    path: "{{ filebrowser_directory }}/.initialized"
  register: filebrowser_initialized

- name: Remove empty database file if exists (for clean init)
  file:
    path: "{{ filebrowser_directory }}/filebrowser.db"
    state: absent
  become: true
  when: not filebrowser_initialized.stat.exists
  notify: Restart Filebrowser

- name: Initialize Filebrowser database (without config file)
  docker_container:
    name: filebrowser-init
    image: "filebrowser/filebrowser:{{ filebrowser_version }}"
    command: "config init --database=/database/filebrowser.db --port=80 --root=/srv --address=0.0.0.0"
    volumes:
      - "{{ filebrowser_directory }}:/database"
    cleanup: true
    detach: false
  become: true
  when: not filebrowser_initialized.stat.exists
  notify: Restart Filebrowser

- name: Import Filebrowser settings configuration (after init)
  template:
    src: "{{ role_path }}/files/settings.json.j2"
    dest: "{{ filebrowser_directory }}/settings.json"
    mode: "0644"
  become: true
  when: not filebrowser_initialized.stat.exists
  notify: Restart Filebrowser

- name: Create custom admin user
  docker_container:
    name: filebrowser-adduser
    image: "filebrowser/filebrowser:{{ filebrowser_version }}"
    command: "users add {{ filebrowser_user }} {{ filebrowser_password }} --database=/database/filebrowser.db --perm.admin"
    volumes:
      - "{{ filebrowser_directory }}:/database"
    cleanup: true
    detach: false
  become: true
  when: not filebrowser_initialized.stat.exists
  notify: Restart Filebrowser

- name: Remove default admin user
  docker_container:
    name: filebrowser-rmuser
    image: "filebrowser/filebrowser:{{ filebrowser_version }}"
    command: "users rm admin --database=/database/filebrowser.db"
    volumes:
      - "{{ filebrowser_directory }}:/database"
    cleanup: true
    detach: false
  become: true
  when: not filebrowser_initialized.stat.exists
  notify: Restart Filebrowser
  ignore_errors: true

- name: Mark database as initialized
  file:
    path: "{{ filebrowser_directory }}/.initialized"
    state: touch
    mode: "0644"
  become: true
  when: not filebrowser_initialized.stat.exists

- name: Stop Filebrowser service temporarily for user update
  systemd:
    name: filebrowser
    state: stopped
  become: true
  when: filebrowser_initialized.stat.exists and filebrowser_enabled
  changed_when: false

- name: Get current user details for ID 1
  docker_container:
    name: filebrowser-get-user
    image: "filebrowser/filebrowser:{{ filebrowser_version }}"
    command: "users ls --database=/database/filebrowser.db"
    volumes:
      - "{{ filebrowser_directory }}:/database"
    cleanup: true
    detach: false
  become: true
  when: filebrowser_initialized.stat.exists
  register: filebrowser_current_users
  changed_when: false
  failed_when: false

- name: Check if user ID 1 already has correct username
  set_fact:
    filebrowser_username_correct: "{{ filebrowser_current_users.container.Output | regex_search('\\s*1\\s+' + filebrowser_user + '\\s+') is not none }}"
  when:
    - filebrowser_initialized.stat.exists
    - filebrowser_current_users.container.Output is defined

- name: Update user ID 1 password (always update password for security)
  docker_container:
    name: filebrowser-update-password
    image: "filebrowser/filebrowser:{{ filebrowser_version }}"
    command: "users update 1 --password={{ filebrowser_password }} --database=/database/filebrowser.db"
    volumes:
      - "{{ filebrowser_directory }}:/database"
    cleanup: true
    detach: false
  become: true
  when: filebrowser_initialized.stat.exists
  register: filebrowser_password_update
  failed_when: filebrowser_password_update.status != 0
  changed_when: false

- name: Update user ID 1 username (only if different)
  docker_container:
    name: filebrowser-update-username
    image: "filebrowser/filebrowser:{{ filebrowser_version }}"
    command: "users update 1 --username={{ filebrowser_user }} --database=/database/filebrowser.db"
    volumes:
      - "{{ filebrowser_directory }}:/database"
    cleanup: true
    detach: false
  become: true
  when:
    - filebrowser_initialized.stat.exists
    - not (filebrowser_username_correct | default(false))
  register: filebrowser_username_update
  failed_when:
    - filebrowser_username_update.status != 0
    - "'already exists' not in (filebrowser_username_update.container.Output | default(''))"
  changed_when: filebrowser_username_update.status == 0
  notify: Restart Filebrowser

- name: Ensure Filebrowser service is started after user update
  systemd:
    name: filebrowser
    state: started
  become: true
  when:
    - filebrowser_initialized.stat.exists
    - filebrowser_enabled
  changed_when: false

- name: Import Filebrowser service
  template:
    src: "{{ role_path }}/files/filebrowser.service.j2"
    dest: "/etc/systemd/system/filebrowser.service"
    mode: "0644"
  notify: Restart Filebrowser
  become: true

- name: Enable/Disable Filebrowser service
  systemd:
    daemon_reload: true
    name: filebrowser
    enabled: "{{ 'true' if filebrowser_enabled else 'false' }}"
    state: "{{ 'started' if filebrowser_enabled else 'stopped' }}"
  become: true
